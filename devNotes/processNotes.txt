Process Notes for React Event Handlers Study
============================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.



Objective of Study
==================
To outline the process to conditionally render nodes based on state and write event handlers.

When building React components, you often will want to render certain elements under certain conditions. To do this you need to use conditional rendering.
Using state and conditional logic, we can show or hide certain elements in a render. For example, you can have a "Tabs" component that has three buttons that,
when clicked, will "render" one content tab.

IN order to test components that update state and conditions based on events, like button clicks, you need to you the testing library called "enzyme". 
Enzyme is a test helper that you can use to create a subtree of elements using a shallow render. Within the subtree of elements, we can traverse of specific
elements and simulate events on those elements, such as clicks.









What is conditional rendering?
==============================
Conditional rendering means rendering certain nodes only at certain times. With conditional rendering, state can be used to make content appear 
and disappear from the page by meeting certain conditions







Tabs workflow
==============

// Create the TEST.
====================
1. Create a test for the Tabs component.
  --------------------------------------------------------------------
    import React from 'react';
    import ReactDOM from 'react-dom';
    import Tabs from './Tabs';

    describe(`Tabs Component`, () => {                                       // test suite for tabs component...
      it('renders without errors', () => {                                   // ... that tests for rendering without error:
        const div = document.createElement('div');                           // Variable creates a div element.
        ReactDOM.render(<Tabs />, div);                                      // ... and renders the element "Tabs" to the container "div".
        ReactDOM.unmountComponentAtNode(div);                                // Then remove the mounted React component
      })
    })
  --------------------------------------------------------------------

// Create the component
2. Create a basic component.
  --------------------------------------------------------------------
    import React from "react";

    class Tabs extends React.Component {                                     // "Tabs" component.
      render() {
        return <div />                                                       // ... that renders a div (for now just to see if the tests work).
      }
    }

    export default Tabs;
  --------------------------------------------------------------------

// TEST.
  3. Try the test to see if it works.
  ---------------------------------------------------------------------
    PASS src/state/state/Tabs.test.js
      Tabs Component
        âˆš renders without errors (13ms)

    Test Suites: 1 passed, 1 total
    Tests:       1 passed, 1 total
    Snapshots:   0 total
    Time:        2.587s
    Ran all test suites related to changed files.

  ---------------------------------------------------------------------

// Add props for accordion
  4. Add an external tabsProp and add it as a prop of the Tabs component.
  * For tabs, we plan on having a collapsible menu of content items. To do this we need 
  to create a tabsProp variable with an array of objects that have each and every tab we want 
  to be selectable.
  ---------------------------------------------------------------------
    const tabsProp = [                                                     // external tabs prop
      { name: 'First tab',
        content: 'Lorem ipsum dolor sit amet ...' },
      { name: 'Second tab',
        content: 'Laboriosam exercitationem ...' },
      { name: 'Third tab',
        content: 'Fugit, sapiente aspernatur...' },
    ];

    class App extends React.Component {
      render() {
        return <div>
          <Tabs tabs={tabsProp} />                                         // tabsProp as a prop to this Tabs component instance.
        </div>
      }
    }
  ---------------------------------------------------------------------



//// At this point, the component should be working fine and testing fine.



// Render the buttons
5. Render the Buttons for each of the buttons of the accordion:
  * For the buttons themselves, we create a constant called "buttons" that will map off the tabs array to make an array 
    of buttons. In this case, we'll use the name.
  * Note here that an error will be created because if you try to use the .map method when you DONT have a .props.tabs, you will
    essentially be saying "undefined.map" and it will not work.  You need to se defaultProps and "tabs".
  --------------------------------------------------------------------------
    class Tabs extends React.Component {
      static defaultProps = { tabs: [] };                                    // First, set defaultProps to access the "tabs" in props.
      render() {
        const buttons = this.props.tabs.map((tab, index) => (                // "buttons" maps props.tabs and for each item (i.e. tab) in the index, the tab.name goes inside a button element.
          <button key={index}>
            {tab.name}
          </button>
        ))
        return (                                                             // And then "buttons" is returned inside a seperate div.
          <div>
            {buttons}
          </div>
        )
      }
    }
  --------------------------------------------------------------------------


6. Render first tab by default
* This means that the content for the first tab is going to show. To execute this, we need ot create a current tab const
  and set this to the first prop (tab.props.tab[0]);
  --------------------------------------------------------------------------
    class Tabs extends React.Component {
      static defaultProps = { tabs: [] };
      render() {
        const buttons = this.props.tabs.map((tab, index) => (
          <button key={index}>
            {tab.name}
          </button>
        ));
        const currentTab = this.props.tabs[0];                               // current tab set at index of 0 (first in the arracy of objects)/
        return (
          <div>
            {buttons}
            {this.props.tabs.length && (                                     // content.
              <div className='content'>
                {currentTab.content}
              </div>
            )}
          </div>
        )
      }
    }
  --------------------------------------------------------------------------


7. Create a snapshot of the component so far.
* To create a snapshot, ,make sure you install 'react-test-renderer' as a local dependency and then import
  the package to your test file (i.e. import renderer from 'react-test-renderer';).
* Also remember that when you run this test, a snapshots folder will be created in your src folder and should
  be committed to your repository for others to reference as well.
  -----------------------------------------------------------------------------
      const tabsProp = [
        { name: 'First tab',
          content: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Laboriosam exercitationem quos consectetur expedita consequatur. Fugit, sapiente aspernatur corporis velit, dolor eum reprehenderit provident ipsam, maiores incidunt repellat! Facilis, neque doloremque.' },
        { name: 'Second tab',
          content: 'Laboriosam exercitationem quos consectetur expedita consequatur. Fugit, sapiente aspernatur corporis velit, dolor eum reprehenderit provident ipsam, maiores incidunt repellat! Facilis, neque doloremque. Lorem ipsum dolor sit amet consectetur adipisicing elit.' },
        { name: 'Third tab',
          content: 'Fugit, sapiente aspernatur corporis velit, dolor eum reprehenderit provident ipsam, maiores incidunt repellat! Facilis, neque doloremque. Lorem ipsum dolor sit amet consectetur adipisicing elit. Laboriosam exercitationem quos consectetur expedita consequatur.' },
      ];

      it('renders the first tab by default', () => {
        const tree = renderer.create(<Tabs tabs={tabsProp} />).toJSON()
        expect(tree).toMatchSnapshot()
      })
  -----------------------------------------------------------------------------



8. Refactoring code to make it more readable.
  ----------------------------------------------------------------
      class Tabs extends React.Component {
        static defaultProps = { tabs: [] };
        renderButtons() {                                             // Button function.
          return this.props.tabs.map((tab, index) => (
            <button key={index}>
              {tab.name}
            </button>
          ))
        }
        renderContent() {                                             // Content function.
          const currentTab = this.props.tabs[0]
          return (
            <div className='content'>
              {currentTab.content}
            </div>
          )
        } 
        render() { 
          return (
            <div>
              {this.renderButtons()}                                  // Buttons function moved to a seperate function (and called with parentheses).
              {this.props.tabs.length && this.renderContent()}        // Content moved to a seperate function.
            </div>
          )
        }
      }
  -----------------------------------------------------------------


9. Hookup the buttons 
  * For the buttons, onClick we want the buttons to show thier respective content.
  * First, instead of hardcoding the state of 0 in the current tab, we create a state property and set the 
     currentTabIndex to 0 and then pass that value in to the render content.
  ------------------------------------------------------------------
      class Tabs extends React.Component {
        static defaultProps = { 
          tabs: [] 
        };
        state = {
          currentTabIndex: 0                                                     // state of current tab
        };
        renderButtons() {
          return this.props.tabs.map((tab, index) => (
            <button key={index}>
              {tab.name}
            </button>
          ))
        }
        renderContent() {
          const currentTab = this.props.tabs[this.state.currentTabIndex];         // currentTab current state
          return (
            <div className='content'>
              {currentTab.content}
            </div>
          )
        } 
        render() { 
          return (
            <div>
              {this.renderButtons()}
              {this.props.tabs.length && this.renderContent()}
            </div>
          )
        }
      }
  ------------------------------------------------------------------

  10. Add the basic event handler to the buttons.
  * And to add a basic event handler, all you need to do is add a "onClick" prop that accesses 
    an exteranl "handleButtonClick" function. For now, all you need to do is test it by logging
    a simple message to the console.
  --------------------------------------------------------------------
      class Tabs extends React.Component {
          static defaultProps = { 
            tabs: [] 
          };
          state = {
            currentTabIndex: 0    
          };
          handleButtonClick(index) {                                                 // And add external function with Initial button click notification.
            console.log('button clicked!', { index })
          }
          renderButtons() {
            return this.props.tabs.map((tab, index) => (
              <button key={index} onClick={() => this.handleButtonClick(index)}>      // click event handler add to button with "onClick"
                {tab.name}
              </button>
            ))
          }

  --------------------------------------------------------------------





How do you test Event listeners?
================================

To test a component more comprehensively, you should take another snapshot.
However, you cant click on buttons in tests using ```react-test-renderer```.
In order to test buttons is "enzyme".
Enzyme is a tetsing library purposefully built for testing React components.
Enzyme has many features, including inspecting state, debugging, traversing nodes, etc.


Install enzyme:   npm install enzyme enzyme-adapter-react-16 --save-dev


Testing event listeners
To test the component more comprehensively, we should take another snapshot after clicking a button (at the very least). This would show us that the content updates when a button is clicked.

Unfortunately, we can't click on buttons in tests using react-test-renderer. The most popular library to help us click on buttons is enzyme. Enzyme is a testing library purposefully built for testing React components. It has many features such as inspecting state, debugging, traversing nodes, etc... We're going to focus on using Enzyme for testing event handlers here.

First, install Enzyme as a development dependency. There's also an enzyme-adapter-react-16 which we can use to tell Enzyme which version of React we're working with. So we'll install both.

npm install enzyme enzyme-adapter-react-16 --save-dev
With these installed, we can configure Enzyme with the adapter. Within create-react-app, Jest will look for a file in a specific location for configuration, ./src/setupTests.js.

Create the file src/setupTests.js and put this inside it to tell Enzyme to work with React version 16.

import { configure } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

configure({ adapter: new Adapter() });
Once you've created this file and contents, make sure you stop your tests (Ctrl-c) and start them again with npm test.

With the configuration in place, we can use Enzyme inside our Tabs.test.js file.

Let's make a new test for when there are no tabs passed as a prop to the component.

it('renders empty given no tabs', () => {

})
Enzyme has dozens of commands and ways to be used. We're going to work with a function called shallow. The shallow function in Enzyme will create a wrapper instance of our component that we can interact with.

We can use shallow the same way as the react-test-renderer create method. Shallow is very similar to this.

import { shallow } from 'enzyme'

/* now showing all the content of the file */

it('renders empty given no tabs', () => {
  const wrapper = shallow(<Tabs />)
})
The wrapper allows us to find nodes within this component's tree; it also allows us to simulate events on nodes.

To use the wrapper with Jest's snapshot functionality, we'll need to create a JSON version of the component. We can use a library called enzyme-to-json that will convert a wrapper to a JSON object.

npm install enzyme-to-json --save-dev
Now create a JSON version of the wrapper.

import { shallow } from 'enzyme'
import toJson from 'enzyme-to-json'

/* now showing all the content of the file */

it('renders empty given no tabs', () => {
  const wrapper = shallow(<Tabs />)
  toJson(wrapper)
})
Finally, we can create a snapshot of the component instance from the JSON.

it('renders empty given no tabs', () => {
  const wrapper = shallow(<Tabs />)
  expect(toJson(wrapper)).toMatchSnapshot()
})
Let's look at the snapshot generated for this test.

exports[`Tabs Component renders empty given no tabs 1`] = `
<div>
  0
</div>
`;
That looks wrong, we're rendering the length of 0! This is an easy fix, we can coerce the .length call inside render into a boolean using not-not, !!.

render() {
  return (
    <div>
      {this.renderButtons()}
      {!!this.props.tabs.length && this.renderContent()}
    </div>
  )
}
Now the snapshot is giving us an error but it's what we want, so press u in the terminal window for tests to update the snapshot.

It's strange to use a mixture of both react-test-renderer and enzyme inside one test file, so let's refactor the whole file to use Enzyme before we write a test for the event handling.

import React from 'react'
import ReactDOM from 'react-dom'
import { shallow } from 'enzyme'
import toJson from 'enzyme-to-json'
import Tabs from './Tabs'

describe(`Tabs Component`, () => {
  const tabsProp = [/* contents not shown */]

  it('renders without errors', () => {
    const div = document.createElement('div');
    ReactDOM.render(<Tabs />, div);
    ReactDOM.unmountComponentAtNode(div);
  })

  it('renders empty given no tabs', () => {
    const wrapper = shallow(<Tabs />)
    expect(toJson(wrapper)).toMatchSnapshot()
  })

  it('renders the first tab by default', () => {
    const wrapper = shallow(<Tabs tabs={tabsProp} />)
    expect(toJson(wrapper)).toMatchSnapshot()
  })
})
There's a quirk with the key prop being shown in snapshots from Jest, so just press u again to update the snapshots.

Now we can write a test for clicking one of the buttons! Let's create a wrapper to start with.

it('closes the first tab and opens any clicked tab', () => {
  const wrapper = shallow(<Tabs tabs={tabsProp} />)
})
Now we need to traverse to one of the buttons so that we can simulate clicking it! In Enzyme wrappers, we can use the find method and pass in a string. The string should be the same as a CSS selector.

wrapper.find('button')
There's a useful method on Enzyme wrappers that we can use to see the HTML for what we currently have selected, called debug. We can do a debug before and after the find to see what happens.

console.log('>>> WRAPPER <<<')
console.log(wrapper.debug())
console.log('>>> FIND(BUTTON) <<<')
console.log(wrapper.find('button').debug())
The debug output for .find('button') shows all of the buttons! That's right, a CSS selector will find all of a certain selection. We only want to get one button. We don't want the first button because that's the button that's already active, let's only use the second button. To select only one element from a list inside a wrapper, use the .at() method with an index number.

console.log(wrapper.find('button').at(1).debug())
This gives us the second button.

With the second button, we can remove the debug and simulate a click event. To simulate clicking the button, we use the .simulate() method and give it a string as an event type, in this case 'click'. Then we can take a new snapshot after simulating the click.

it('closes the first tab and opens any clicked tab', () => {
  const wrapper = shallow(<Tabs tabs={tabsProp} />)
  wrapper.find('button').at(1).simulate('click')
  expect(toJson(wrapper)).toMatchSnapshot()
})
This generated a new snapshot for the second tab being active, you can see it inside the src/state/__snapshots__/Tabs.test.js.snap file.

To test that this test works, temporarily comment out the setState call inside the Tab component to see Jest point out it isn't working. Then uncomment the call to restore the functionality.
















========SIMPLE EXAMPLE=====================
Reform with emphasis on event handlers
===========================================
How do you implement event listeners?
===========================================
* Events and state go hand in hand.
* It is VERY common to update state in response to a users action (i.e. submitting the form, interaction with a control, clicking a button, etc.).

For this example, we'll make a basic clicker. We set the state at zero for the initial count and then reference it in the component using this.state.count.
---------------------------------------------------------
  class Counter extends React.Component {
    constructor(props) {
      super(props)
      this.state = { 
        count: 0                                                  // set the initial state to 0 so that when you call this.state, it will be 0.
      }
    }
    render() {
      return (
        <div>
          <p>The current count: {this.state.count}</p>
          <button>
            Add 1
          </button>
        </div>
      )
    }
  }
---------------------------------------------------------

## Add the "onClick" prop to wire the button to trigger when clicked.
To wire code to be triggered when a button is clicked, we need to add a prop to the BUTTON JSX ITSELF!
Remember that within the props object there are a number properties you can select. IN this case, we want "onClick".
---------------------------------------------------------------------------
  class Counter extends React.Component {
    constructor(props) {
      super(props)
      this.state = { 
        count: 0 
      }
    }
    render() {
      return (
        <div>
          <p>The current count: {this.state.count}</p>
          <button onClick={function() { console.log('clicked!') }} >        // add the "onClick" prop.
            Add 1
          </button>
        </div>
      )
    }
  }
----------------------------------------------------------------------------

## To make code tidy, move the event handler to a seperate method.
However, a full event handler is going to be very cluttered, so its best to move the event handler
to a method on the class called "handleButtonClick"
---------------------------------------------------------------------------
  class Counter extends React.Component {
    constructor(props) {
      super(props)
      this.state = { 
        count: 0 
      }
    }
    handleButtonClick() {                                                  // 2. Inserted the "handleClickButton" method before render.
      console.log(this.state.count);                                       // 3. and to test, when you click "add 1", it will show the clicks you make at that time.
    } 
    render() {
      return (
        <div>
          <p>The current count: {this.state.count}</p>
          <button onClick={this.handleButtonClick} >                        // 1. changed to a method on the class called "handleButtonClick"
            Add 1
          </button>
        </div>
      )
    }
  }
----------------------------------------------------------------------------

## Use an arrow function to avoid typeerrors.
At this point, you will get an error that reads "TypeError: Cannot read property 'state' of undefined". Apparently this is a bug. This means
that we are trying to read a property called state ona variable thats currently set to undefined.  We want to read "this",
but right now it is set to undefined. To solve this, use an ARROW FUNCTION...not a function. Why? Because the arrow function makes sure that
the "this" is refering to the class instance.
------------------------------------------------------------------------
  class Counter extends React.Component {
    constructor(props) {
      super(props)
      this.state = { 
        count: 0 
      }
    }
    handleButtonClick = () => {                                               // use an arrow function for the method to avoid the error bug.
      console.log(this.state.count)
    }
    render() {
      return (
        <div>
          <p>The current count: {this.state.count}</p>
          <button onClick={this.handleButtonClick}>
            Add 1
          </button>
        </div>
      )
    }
  }
------------------------------------------------------------------------


## To set the state, use this.setState method.
When you use "this.setState", you update the state of a component that has been mounted and pass in an object to "merge" over the toMatchSnapshot
of an exisiting state (like Object.assign).  In the example case below, what we are doing is updating the state of count and merging the initial
state to the value of newCount.   

Note here that state updates go hand-in-hand with event handlers. In this example case, the the state update occurs in the "handleButtonClick"
action the user takes. But keep in mind the "this" problem which is a bug that needs to be fixed in future versions.

==clean up==
Now that the event listener is properly hooked up and setup in sich a way where it avoid the bug error, you can add your code
for the onClick action. At this point in the example, we have an exisiting count of 0 supplied by the current state. 

When the user clicks on the button, the "onClick" prop calls "this.handleButtonClick" which in turn executes the action we want 
to happen when the user clicks. In this case, we want to increment by one for every click the user makes. 

To implement this, we first create a variable called "newCount" and store it as a constant. The value will be the current count, 
(this.state.count) plus 1.

Then, to set the new state, use this.setState with the incrementing variable we just created.
-------------------------------------------------------------------------
  class Counter extends React.Component {
    constructor(props) {
      super(props)
      this.state = { 
        count: 0 
      }
    }
    handleButtonClick = () => {                                           
      const newCount = this.state.count + 1;                                 // variable that increments the count by 1.
      this.setState({                                                        // sets the new state count.
        count: newCount
      })
    }
    render() {
      return (
        <div>
          <p>The current count: {this.state.count}</p>
          <button onClick={this.handleButtonClick}>
            Add 1
          </button>
        </div>
      )
    }
  }
-------------------------------------------------------------------------
